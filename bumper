#!/usr/bin/env python

import os
import datetime
import subprocess
import github
import click
import requests
import re


from subprocess import CalledProcessError
from hot.utils.auth import OSAuth


class BumpUnnecessary(Warning):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


class Bumper(object):
    def __init__(self, github_token=None, basename='stable'):
        self.tag_basename = basename
        if github_token:
            self.github_token = github_token
        elif os.environ.get('GITHUB_TOKEN'):
            self.github_token = os.environ.get('GITHUB_TOKEN')

        assert self.github_token, ('A github token is required, either supp'
                                   'lied via the command line, or the'
                                   'environment variable GITHUB_TOKEN.')

        self.github = github.Github(self.github_token)
        self.repo_cache = {}

    def bump(self, orgname=None, repo=None, branch='master',
             tag_basename='stable'):
        assert orgname, 'bump requires an orgname.'
        assert repo, 'bump requires a repo.'

        target_branch_sha = self._get_branch_sha(orgname, repo, branch)
        if target_branch_sha.startswith(
                self._get_existing_sha(orgname, repo, self.tag_basename)):
            print ("*** tag {} already exists and matches branch {}, "
                   "so our work is done.").format(self.tag_basename, branch)
            raise BumpUnnecessary(
                ("tag {} already exists and matches"
                 "branch {}").format(self.tag_basename, branch))
        else:
            self._create_historical_tag(orgname, repo, branch)
            self._update_tag(orgname, repo, target_branch_sha)

    def _update_tag(self, orgname, repo, target_branch_sha):
        gh = self.github
        git_repo = gh.get_repo("{}/{}".format(orgname, repo))
        tag_name = self.tag_basename
        tag_message = "current release"
        try:
            current_tag_ref = git_repo.get_git_ref("tags/{}".format(
                self.tag_basename))
        except github.GithubException:
            print "no git ref for {}".format(self.tag_basename)
            current_tag_ref = None
        # print "** ref for {} {} {}".format(self.tag_basename,
        #                                   current_tag_ref.ref,
        #                                   current_tag_ref.url)
        if current_tag_ref.ref:
            current_tag = git_repo.get_git_tag(current_tag_ref.object.sha)
            print "* current tag {} is at sha {}".format(
                self.tag_basename,
                current_tag.object.sha)
            print "* deleting tag {}...".format(self.tag_basename)
            current_tag_ref.delete()
        print "* creating new tag {} at sha {}".format(self.tag_basename,
                                                       target_branch_sha)
        tag_object = git_repo.create_git_tag(
            tag_name,
            tag_message,
            target_branch_sha,
            "commit",
            tagger=self._get_author_info())
        if tag_object:
            git_repo.create_git_ref("refs/tags/{}".format(tag_name),
                                    tag_object.sha)

    def _create_historical_tag(self, orgname, repo, branch):
        gh = self.github
        git_repo = gh.get_repo("{}/{}".format(orgname, repo))
        tag_name = "{}-{}".format(self.tag_basename, self._get_now_string())
        tag_message = "Historical tag for release on {}\n".format(
            datetime.datetime.utcnow().strftime("%A %B %d, %Y"))
        tag_object = git_repo.create_git_tag(
            tag_name,
            tag_message,
            self._get_branch_sha(orgname, repo, branch),
            "commit",
            tagger=self._get_author_info())
        if tag_object:
            print "* creating historical tag {} at sha {}".format(
                tag_name,
                tag_object.object.sha)
            git_repo.create_git_ref("refs/tags/" + tag_name, tag_object.sha)

    def _get_now_string(self):
        return datetime.datetime.utcnow().strftime(
            "%Y%m%d%H%M%S")

    def _get_branch_sha(self, orgname, repo, branch):
        gh = self.github
        git_repo = gh.get_repo("{}/{}".format(orgname, repo))
        branch_object = git_repo.get_branch(branch)
        sha = branch_object.commit.sha
        return sha

    def _get_existing_sha(self, orgname, repo, refname):
        gh = self.github
        git_repo = gh.get_repo("{}/{}".format(orgname, repo))
        try:
            ref = git_repo.get_git_ref("tags/" + refname)
        except github.GithubException:
            return "None"
        if ref.object:
            tag = git_repo.get_git_tag(ref.object.sha)
            return tag.object.sha
        else:
            return "None"

    def _get_author_info(self):
        git_config_info = {}
        default_author = github.InputGitAuthor(
            'hot automation',
            'none',
            datetime.datetime.utcnow().strftime(
                "%Y-%m-%dT%H:%M:%SZ"))
        try:
            git_output = subprocess.check_output("git config --list",
                                                 shell=True)
        except (OSError, CalledProcessError):
            # couldn't run git, so return canned author info
            return default_author

        for line in git_output.splitlines():
            rlvalue = line.split("=")
            if len(rlvalue) == 2:
                git_config_info[rlvalue[0]] = rlvalue[1]

        if not git_config_info.get('user.name'):
            github_author = default_author
        else:
            github_author = github.InputGitAuthor(
                git_config_info.get('user.name'),
                git_config_info.get('user.email'),
                datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"))

        return github_author


def fusion_flush_cache(regions=None):
    auth = OSAuth()
    if not regions:
        regions = ["DFW", "ORD", "IAD", "HKG", "SYD", "LON"]
    for region in regions:
        print "flushing cache for region {}...".format(region),
        # FIXME: this is a horrible hack but necessary as the
        # LON endpoint doesn't appear in the US realm's service catalog
        if region.lower() == "lon":
            dfw_url = auth.keystone_client.service_catalog.url_for(
                service_type='orchestration',
                endpoint_type='publicURL',
                region_name="DFW")
            heat_url = re.sub("dfw", "lon", dfw_url)
        else:
            heat_url = auth.keystone_client.service_catalog.url_for(
                service_type='orchestration',
                endpoint_type='publicURL',
                region_name=region)
        headers = {'X-Auth-Token': auth.get_token(),
                   'Accept': 'application/json'}
        template_url = heat_url + '/templates'
        r = requests.delete(template_url, headers=headers)
        print "{} responded with {}".format(region, r.status_code)


@click.group()
def cli():
    pass


@cli.command('bump')
@click.argument('orgname')
@click.argument('repo')
@click.option('--flush-fusion-cache', is_flag=True)
def bump(orgname, repo, flush_fusion_cache):
    try:
        bumper = Bumper()
        bumper.bump(orgname=orgname, repo=repo)
        if flush_fusion_cache:
            fusion_flush_cache()
    except BumpUnnecessary:
        pass


@cli.command('flush')
@click.argument('regions', nargs=-1)
def flush(regions):
    fusion_flush_cache([r.upper() for r in regions])


if __name__ == "__main__":
    cli()
